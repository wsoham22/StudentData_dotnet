name: Containerize

on:
  push:
    tags:
      - "v*-dev"
      - "v*-qa"
    branches:
      - "**"

permissions:
  contents: read
  actions: read
  checks: write

env:
  AWS_ECR_REGION: ${{ secrets.AWS_ECR_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
  IMAGE_NAME: webapplication3  # Your Docker image name

jobs:
  # 🔍 Debugging GitHub Actions Context
  investigate:
    runs-on: ubuntu-latest
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v2

  # 🏷 Extract Tag Information
  tagify:
    name: Get Tag
    if: ${{ contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.latest_tag.outputs.TAG_NAME }}
    steps:
      - name: Get Tag
        id: latest_tag
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

  # 🏗 Build & Unit Test for .NET App
  build-and-test:
    env: 
      SOLUTION: 'WebApplication3.sln'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.101'  # Adjust based on your .NET version

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Solution
        run: dotnet build $SOLUTION --no-restore

      - name: Run Unit Tests
        run: dotnet test $SOLUTION --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" || true


  # 🚀 Push to ECR
  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # - name: Build Docker Image
      #   run: |
      #     docker build -t $IMAGE_NAME ./WebApplication3 .

      - name: Assign Image Tag (Git SHA)
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Tag Docker Image
        run: |
          docker tag webapplication3:latest ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:ECR_REPO_NAME

      - name: Push Docker Image to ECR
        run: |
          echo "Pushing Docker image with tag: $IMAGE_TAG"
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:ECR_REPO_NAME

