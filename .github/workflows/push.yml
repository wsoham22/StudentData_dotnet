name: Containerize

on:
  push:
    tags:
      - "v*-dev"
      - "v*-qa"

permissions:
  contents: read
  actions: read
  checks: write

jobs:

  # üîç Debugging GitHub Actions Context
  investigate:
    runs-on: ubuntu-latest
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v2

  # üè∑ Extract Tag Information
  tagify:
    name: Get Tag
    if: ${{ contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.latest_tag.outputs.TAG_NAME }}
    steps:
      - name: Get Tag
        id: latest_tag
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

  # üèó Build & Unit Test for .NET App
  BuildAndUnitTests:
    env:
      SOLUTION: 'WebApplication3.sln'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET 9.0.101
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.101

      - name: Restore dependencies
        run: dotnet restore $SOLUTION

      - name: Build
        run: dotnet build $SOLUTION --no-restore

      - name: Run Unit Tests
        run: dotnet test $SOLUTION --no-build --verbosity normal || true

  # üê≥ Containerize & Push to AWS ECR
  containerize:
    name: Containerize
    needs: [tagify, BuildAndUnitTests]
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'qa') || endsWith(needs.tagify.outputs.the_tag, 'dev') }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET 9.0.101
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.101

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'
     
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
        run: |
          cd WebApplication3
          IFS='-'
          read -a parsed_tag <<< "${{ needs.tagify.outputs.the_tag }}"
          VERSION_ONLY=${parsed_tag[0]}
          ENVIRONMENT=${parsed_tag[1]}
          IFS=' '
          DEV_BASE=$VERSION_ONLY-dev
          DEV_TAG=$REGISTRY/webapp3_api:$DEV_BASE
          
          echo "Original tag: ${{ needs.tagify.outputs.the_tag }}"
          echo "Version only tag: $VERSION_ONLY"
          
          docker build -t $REGISTRY/webapp3_api:${{ needs.tagify.outputs.the_tag }} -t $DEV_TAG .
          docker push $REGISTRY/webapp3_api:${{ needs.tagify.outputs.the_tag }}

      - name: Cleanup
        run: docker logout
        if: always()
